[{"/Users/cisip/Desktop/weather-ulap/client/src/index.js":"1","/Users/cisip/Desktop/weather-ulap/client/src/App.js":"2","/Users/cisip/Desktop/weather-ulap/client/src/reportWebVitals.js":"3","/Users/cisip/Desktop/weather-ulap/client/src/Components/HourlyContainer/HourlyContainer.js":"4","/Users/cisip/Desktop/weather-ulap/client/src/Components/WeatherWidget/WeatherWidget.js":"5","/Users/cisip/Desktop/weather-ulap/client/src/Components/ApiContext.js":"6","/Users/cisip/Desktop/weather-ulap/client/src/Components/Search/Search.js":"7","/Users/cisip/Desktop/weather-ulap/client/src/Components/Snapshot/Snapshot.js":"8","/Users/cisip/Desktop/weather-ulap/client/src/Components/WeekContainer/WeekContainer.js":"9","/Users/cisip/Desktop/weather-ulap/client/src/Components/Hour/Hour.js":"10","/Users/cisip/Desktop/weather-ulap/client/src/utils/query.js":"11","/Users/cisip/Desktop/weather-ulap/client/src/Components/Rain/Rain.js":"12","/Users/cisip/Desktop/weather-ulap/client/src/Components/AirQuality/AirQuality.js":"13","/Users/cisip/Desktop/weather-ulap/client/src/Components/Humidity/Humidity.js":"14","/Users/cisip/Desktop/weather-ulap/client/src/Components/Temperature/Temperature.js":"15","/Users/cisip/Desktop/weather-ulap/client/src/Components/Sunrise/Sunrise.js":"16","/Users/cisip/Desktop/weather-ulap/client/src/Components/UvIndex/UvIndex.js":"17","/Users/cisip/Desktop/weather-ulap/client/src/Components/WeekElement/WeekElement.js":"18"},{"size":501,"mtime":1656044508456,"results":"19","hashOfConfig":"20"},{"size":1409,"mtime":1656044508450,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":1656044508456,"results":"22","hashOfConfig":"20"},{"size":1471,"mtime":1656044508452,"results":"23","hashOfConfig":"20"},{"size":1840,"mtime":1656044508455,"results":"24","hashOfConfig":"20"},{"size":6761,"mtime":1656044508451,"results":"25","hashOfConfig":"20"},{"size":818,"mtime":1656044508453,"results":"26","hashOfConfig":"20"},{"size":634,"mtime":1656044508453,"results":"27","hashOfConfig":"20"},{"size":848,"mtime":1656168082956,"results":"28","hashOfConfig":"20"},{"size":1663,"mtime":1656044508451,"results":"29","hashOfConfig":"20"},{"size":902,"mtime":1656044508457,"results":"30","hashOfConfig":"20"},{"size":627,"mtime":1656044508453,"results":"31","hashOfConfig":"20"},{"size":778,"mtime":1656044508451,"results":"32","hashOfConfig":"20"},{"size":618,"mtime":1656044508452,"results":"33","hashOfConfig":"20"},{"size":1099,"mtime":1656044508454,"results":"34","hashOfConfig":"20"},{"size":919,"mtime":1656044508454,"results":"35","hashOfConfig":"20"},{"size":698,"mtime":1656044508454,"results":"36","hashOfConfig":"20"},{"size":1183,"mtime":1656044508456,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"5zypnn",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},"/Users/cisip/Desktop/weather-ulap/client/src/index.js",[],["78","79"],"/Users/cisip/Desktop/weather-ulap/client/src/App.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/reportWebVitals.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/HourlyContainer/HourlyContainer.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/WeatherWidget/WeatherWidget.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/ApiContext.js",["80"],"\nimport { useLazyQuery } from '@apollo/client';\nimport React, { createContext, useEffect, useState } from 'react'\nimport Localbase from 'localbase'\nimport {\n    QUERY_CITY_NAME,\n    QUERY_CITY_LOCATION,\n    QUERY_API_POLLUTION\n} from '../utils/query'\nconst ApiContext = createContext({})\n\nexport const ApiProvider = ({ children }) => {\n    const [CurrentCityText, setCurrentCityText] = useState(localStorage.getItem('Lastcity') == null ? 'dallas' : localStorage.getItem('Lastcity'))\n    const [getWeather] = useLazyQuery(QUERY_CITY_NAME);\n    const [getWeatherLocation] = useLazyQuery(QUERY_CITY_LOCATION);\n    const [getApiPollution] = useLazyQuery(QUERY_API_POLLUTION)\n    const [dataFromDb, setDataFromDb] = useState({})\n    const [arrayData, setArrayData] = useState([])\n    const [hourlyData, setHourlyData] = useState([])\n    const [isLoading, setLoading] = useState(true)\n    const [timezone, setTimezone] = useState('')\n    const [currentData, setCurrentData]= useState('')\n    const [apiPollutionState, setApiPollutionState] = useState('')\n    let db = new Localbase('weatherDb')\n\n    const handleCityText = (event) => {\n        const { value } = event.target\n        setCurrentCityText(value.toLowerCase())\n    }\n\n    // takes the current time when called then adds 12 hours (milliseconds format)\n    const getExpireTimer = () => {\n        const now = new Date().getTime()\n        // 12 hours to milliseconds\n        const expireToken = 43200000\n        const newExpireToken = now + expireToken\n        return newExpireToken\n    }\n\n    // when called will take the API JSON, and API query cityname and insert to Database\n    const addDataToDb = async (data, cityName) => {\n        try {\n            await db.collection('weatherDb').add({\n                metadata: data,\n                city: cityName,\n                expire: getExpireTimer()\n            })\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    // function called to delete document in the indexdb\n    const deleteDataDb = async () => {\n        try {\n            await db.collection('weatherDb').doc({ city: CurrentCityText }).delete()\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const getDataDb = async () => {\n        try {\n            const data = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\n            await setDataFromDb(data)\n\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const checkIfExpired = async () => {\n        const now = new Date().getTime()\n        try {\n            const datafromDbisExpired = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\n            if (!datafromDbisExpired) return true\n            if (await datafromDbisExpired.expire < now) {\n                console.log(`checkDatabase() has found that the entry is expired and now will perform a delete, fetch, add to refresh data`)\n                await deleteDataDb()\n                const responseCheck = await FetchCityByName()\n                if (!responseCheck) {\n                    return false\n                }\n                console.log(responseCheck)\n                await addDataToDb(responseCheck, CurrentCityText)\n            }\n            return true\n\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const checkDatabase = async () => {\n        const isDocumentinDb = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\n        try {\n            // if document does not exist in database\n            if (isDocumentinDb == null) {\n                const fetchFromApi = await FetchCityByName()\n                if (!fetchFromApi) {\n                    return false\n                }\n                await addDataToDb(fetchFromApi, CurrentCityText)\n            }\n            return true\n        } catch (e) {\n            console.log(e)\n        }\n\n    }\n\n    const InitializeData = async () => {\n        if (CurrentCityText === '') {\n            setCurrentCityText(localStorage.getItem('Lastcity'))\n        }\n        const x = await checkDatabase()\n        const y = await checkIfExpired() // true\n        if (x && y) {\n            await getDataDb()\n            await setLoading(false)\n            const response = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\n            const timezoneData = response.metadata[0].timezone\n            setTimezone(timezoneData)\n            const dailyarray = response.metadata[0].daily\n            const hourlyarray = response.metadata[0].hourly\n            await setArrayData(dailyarray)\n            await setHourlyData(hourlyarray)\n            const currentUvi = response.metadata[1]\n            await setApiPollutionState(currentUvi)\n            const currentData = response.metadata[0].current\n            await setCurrentData(currentData)\n            localStorage.setItem('Lastcity', CurrentCityText)\n        }\n    }\n\n    const SubmitRequest = async (e) => {\n        e.preventDefault()\n        await InitializeData()\n    }\n\n    // fetches using the variable then calls on function below to call with lon and lat\n    const FetchCityByName = async () => {\n       \n        try {\n            const y = CurrentCityText\n            const getWeatherApiResponse = await getWeather({ variables: { cityname: y } })\n            \n            const err = getWeatherApiResponse.data.getCityByName.coord\n            if (err === null) {\n                setCurrentCityText(localStorage.getItem('Lastcity'))\n                \n                return\n            }\n         \n            localStorage.setItem('Lastcity', y)\n            const { lon, lat } = getWeatherApiResponse.data.getCityByName.coord\n            const getWeatherLocationResponse = await getWeatherLocation({ variables: { lon: lon, lat: lat } })\n            const ResponseData = getWeatherLocationResponse.data.getCityByLocation\n            const getPollutionApi = await getApiPollution({variables: { lon: lon, lat: lat } })\n            const getPollutionApiResponse = getPollutionApi.data.getPollutionindex.list[0].main.aqi\n\n            await setApiPollutionState(getPollutionApiResponse)\n            return [ResponseData,getPollutionApiResponse  ]\n        } catch (e) {\n            return\n        }\n    }\n\n    useEffect(() => {\n        setCurrentCityText(localStorage.getItem('Lastcity'))\n        InitializeData()\n    }, [])\n\n    return (\n        <ApiContext.Provider value={{\n            CurrentCityText,\n            SubmitRequest,\n            handleCityText,\n            dataFromDb,\n            isLoading,\n            arrayData,\n            hourlyData,\n            timezone,\n            apiPollutionState,\n            currentData\n        }}>\n            {children}\n        </ApiContext.Provider>\n    )\n}\n\nexport default ApiContext","/Users/cisip/Desktop/weather-ulap/client/src/Components/Search/Search.js",["81"],"import React, { useContext } from 'react'\nimport ApiContext from '../ApiContext'\nimport {AiOutlineSearch} from 'react-icons/ai'\nimport {GrAdd} from 'react-icons/gr'\nimport '../Search/Search.css'\nfunction Search() {\n    const { SubmitRequest, CurrentCityText, handleCityText } = useContext(ApiContext)\n    return (\n        <>\n        <div className='inputContainer'>\n            <form onSubmit={(e) => SubmitRequest(e)} className=\"formContainer\">\n                <AiOutlineSearch className='AiSearch'/>\n                <label>\n                    <input className=\"inputlength\"type=\"text\" value={CurrentCityText} onChange={handleCityText} maxLength=\"12\"/>\n                </label>\n            </form>\n            {/* <GrAdd className='GrAdd'/> */}\n        </div>\n            \n        </>\n    )\n}\n\nexport default Search\n","/Users/cisip/Desktop/weather-ulap/client/src/Components/Snapshot/Snapshot.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/WeekContainer/WeekContainer.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Hour/Hour.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/utils/query.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Rain/Rain.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/AirQuality/AirQuality.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Humidity/Humidity.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Temperature/Temperature.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Sunrise/Sunrise.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/UvIndex/UvIndex.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/WeekElement/WeekElement.js",["82"],"import React from 'react'\nimport './WeekElement.css'\nimport cloud from '../../utils/cloud.svg'\nimport Moment from 'react-moment';\nfunction WeekElement({ hitemp, lowtemp, pop, dt, today, icon }) {\n  const weather = ` http://openweathermap.org/img/wn/${icon}@4x.png`\n  const currentDate = new Date(dt * 1000)\n  return (\n    <>\n      <div className=\"DayCard\">\n        <div className='CurrentDay asc p16'>\n          {today ? <div>{today}</div> : <Moment format=\"ddd\">{currentDate}</Moment>}\n          {/* <Moment format=\"ddd\">{currentDate}</Moment> */}\n\n        </div>\n        <div className='CurrentDate asc p16'>\n          <Moment format=\"MM/DD\">{currentDate}</Moment></div>\n        <div className='CurrentHighTemp asc p16'>{Math.floor(hitemp)}°</div>\n        <div className='CurrentLowTemp asc p16'>{Math.floor(lowtemp)}°</div>\n        {(pop <= 0) ?\n          <></> : <>\n            <div className='CurrentIcon'>\n              <img className='s16 CurrentIconCloud' src={weather} alt=\"cloudsvg\"></img>\n            </div>\n            <div className='currentIconRain p8'>\n\n\n              {Math.floor(pop)}%\n            </div></>}\n\n      </div>\n    </>\n  )\n}\n\nexport default WeekElement",{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":172,"column":8,"nodeType":"89","endLine":172,"endColumn":10,"suggestions":"90"},{"ruleId":"91","severity":1,"message":"92","line":4,"column":9,"nodeType":"93","messageId":"94","endLine":4,"endColumn":14},{"ruleId":"91","severity":1,"message":"95","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":13},"no-native-reassign",["96"],"no-negated-in-lhs",["97"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'InitializeData'. Either include it or remove the dependency array.","ArrayExpression",["98"],"no-unused-vars","'GrAdd' is defined but never used.","Identifier","unusedVar","'cloud' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},"Update the dependencies array to be: [InitializeData]",{"range":"101","text":"102"},[6350,6352],"[InitializeData]"]