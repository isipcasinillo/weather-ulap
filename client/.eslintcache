[{"D:\\Desktop\\weather-ulap\\client\\src\\index.js":"1","D:\\Desktop\\weather-ulap\\client\\src\\reportWebVitals.js":"2","D:\\Desktop\\weather-ulap\\client\\src\\App.js":"3","D:\\Desktop\\weather-ulap\\client\\src\\Components\\Snapshot\\Snapshot.js":"4","D:\\Desktop\\weather-ulap\\client\\src\\Components\\ApiContext.js":"5","D:\\Desktop\\weather-ulap\\client\\src\\Components\\HourlyContainer\\HourlyContainer.js":"6","D:\\Desktop\\weather-ulap\\client\\src\\Components\\AirQuality\\AirQuality.js":"7","D:\\Desktop\\weather-ulap\\client\\src\\Components\\UvIndex\\UvIndex.js":"8","D:\\Desktop\\weather-ulap\\client\\src\\Components\\Humidity\\Humidity.js":"9","D:\\Desktop\\weather-ulap\\client\\src\\Components\\Rain\\Rain.js":"10","D:\\Desktop\\weather-ulap\\client\\src\\Components\\Temperature\\Temperature.js":"11","D:\\Desktop\\weather-ulap\\client\\src\\Components\\Sunrise\\Sunrise.js":"12","D:\\Desktop\\weather-ulap\\client\\src\\utils\\query.js":"13","D:\\Desktop\\weather-ulap\\client\\src\\Components\\Hour\\Hour.js":"14","D:\\Desktop\\weather-ulap\\client\\src\\Components\\WeekElement\\WeekElement.js":"15","D:\\Desktop\\weather-ulap\\client\\src\\Components\\WeekContainer\\WeekContainer.js":"16","D:\\Desktop\\weather-ulap\\client\\src\\Components\\WeatherWidget\\WeatherWidget.js":"17","D:\\Desktop\\weather-ulap\\client\\src\\Components\\Search\\Search.js":"18"},{"size":519,"mtime":1654679995267,"results":"19","hashOfConfig":"20"},{"size":375,"mtime":1654679995268,"results":"21","hashOfConfig":"20"},{"size":1433,"mtime":1655061171398,"results":"22","hashOfConfig":"20"},{"size":659,"mtime":1654679995263,"results":"23","hashOfConfig":"20"},{"size":6120,"mtime":1654935121804,"results":"24","hashOfConfig":"20"},{"size":1503,"mtime":1654932708893,"results":"25","hashOfConfig":"20"},{"size":639,"mtime":1654679995239,"results":"26","hashOfConfig":"20"},{"size":565,"mtime":1654679995265,"results":"27","hashOfConfig":"20"},{"size":452,"mtime":1654679995241,"results":"28","hashOfConfig":"20"},{"size":481,"mtime":1654679995242,"results":"29","hashOfConfig":"20"},{"size":946,"mtime":1654679995264,"results":"30","hashOfConfig":"20"},{"size":607,"mtime":1654679995264,"results":"31","hashOfConfig":"20"},{"size":639,"mtime":1654932708896,"results":"32","hashOfConfig":"20"},{"size":1722,"mtime":1654937296955,"results":"33","hashOfConfig":"20"},{"size":1218,"mtime":1655060969030,"results":"34","hashOfConfig":"20"},{"size":871,"mtime":1655061087389,"results":"35","hashOfConfig":"20"},{"size":1881,"mtime":1655061137711,"results":"36","hashOfConfig":"20"},{"size":569,"mtime":1655061180098,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"11hbboj",{"filePath":"41","messages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"62","messages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Desktop\\weather-ulap\\client\\src\\index.js",[],["77","78"],"D:\\Desktop\\weather-ulap\\client\\src\\reportWebVitals.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\App.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\Snapshot\\Snapshot.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\ApiContext.js",["79"],"\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport React, { createContext, useEffect, useState } from 'react'\r\nimport Localbase from 'localbase'\r\nimport {\r\n    QUERY_CITY_NAME,\r\n    QUERY_CITY_LOCATION\r\n} from '../utils/query'\r\nconst ApiContext = createContext({})\r\n\r\nexport const ApiProvider = ({ children }) => {\r\n    const [CurrentCityText, setCurrentCityText] = useState(localStorage.getItem('Lastcity') == null ? 'dallas' : localStorage.getItem('Lastcity'))\r\n    const [getWeather] = useLazyQuery(QUERY_CITY_NAME);\r\n    const [getWeatherLocation] = useLazyQuery(QUERY_CITY_LOCATION);\r\n    const [dataFromDb, setDataFromDb] = useState({})\r\n    const [arrayData, setArrayData] = useState([])\r\n    const [hourlyData, setHourlyData] = useState([])\r\n    const [isLoading, setLoading] = useState(true)\r\n    const [timezone, setTimezone] = useState('')\r\n    let db = new Localbase('weatherDb')\r\n\r\n    const handleCityText = (event) => {\r\n        const { value } = event.target\r\n        setCurrentCityText(value.toLowerCase())\r\n    }\r\n\r\n    // takes the current time when called then adds 12 hours (milliseconds format)\r\n    const getExpireTimer = () => {\r\n        const now = new Date().getTime()\r\n        // 12 hours to milliseconds\r\n        const expireToken = 43200000\r\n        const newExpireToken = now + expireToken\r\n        return newExpireToken\r\n    }\r\n    // when called will take the API JSON, and API query cityname and insert to Database\r\n    const addDataToDb = async (data, cityName) => {\r\n        try {\r\n            await db.collection('weatherDb').add({\r\n                metadata: data,\r\n                city: cityName,\r\n                expire: getExpireTimer()\r\n            })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n\r\n    // function called to delete document in the indexdb\r\n    const deleteDataDb = async () => {\r\n        try {\r\n            await db.collection('weatherDb').doc({ city: CurrentCityText }).delete()\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n\r\n    const getDataDb = async () => {\r\n        try {\r\n            const data = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\r\n            await setDataFromDb(data)\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const checkIfExpired = async () => {\r\n        const now = new Date().getTime()\r\n        try {\r\n            const datafromDbisExpired = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\r\n            if (!datafromDbisExpired) return true\r\n            if (await datafromDbisExpired.expire < now) {\r\n                console.log(`checkDatabase() has found that the entry is expired and now will perform a delete, fetch, add to refresh data`)\r\n                await deleteDataDb()\r\n                const responseCheck = await FetchCityByName()\r\n                if (!responseCheck) {\r\n                    return false\r\n                }\r\n                console.log(responseCheck)\r\n                await addDataToDb(responseCheck, CurrentCityText)\r\n\r\n            }\r\n            return true\r\n\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n    }\r\n\r\n    const checkDatabase = async () => {\r\n        const isDocumentinDb = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\r\n        try {\r\n            // if document does not exist in database\r\n            if (isDocumentinDb == null) {\r\n                const fetchFromApi = await FetchCityByName()\r\n                if (!fetchFromApi) {\r\n                    return false\r\n                }\r\n\r\n                await addDataToDb(fetchFromApi, CurrentCityText)\r\n            }\r\n            return true\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n    }\r\n    const InitializeData = async () => {\r\n        if (CurrentCityText === '') {\r\n            setCurrentCityText(localStorage.getItem('Lastcity'))\r\n        }\r\n        const x = await checkDatabase()\r\n        const y = await checkIfExpired() // true\r\n        if (x && y) {\r\n            await getDataDb()\r\n            await setLoading(false)\r\n            const response = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\r\n            const timezoneData = response.metadata.timezone\r\n            setTimezone(timezoneData)\r\n            const dailyarray = response.metadata.daily\r\n            const hourlyarray = response.metadata.hourly\r\n            await setArrayData(dailyarray)\r\n            await setHourlyData(hourlyarray)\r\n            localStorage.setItem('Lastcity', CurrentCityText)\r\n        }\r\n    }\r\n    const SubmitRequest = async (e) => {\r\n\r\n        e.preventDefault()\r\n        await InitializeData()\r\n\r\n\r\n    }\r\n    // fetches using the variable then calls on function below to call with lon and lat\r\n    const FetchCityByName = async () => {\r\n        try {\r\n            const y = CurrentCityText\r\n            const getWeatherApiResponse = await getWeather({ variables: { cityname: y } })\r\n            const err = getWeatherApiResponse.data.getCityByName.coord\r\n            if (err === null) {\r\n                setCurrentCityText(localStorage.getItem('Lastcity'))\r\n                return\r\n            }\r\n            localStorage.setItem('Lastcity', y)\r\n            const { lon, lat } = getWeatherApiResponse.data.getCityByName.coord\r\n            const getWeatherLocationResponse = await getWeatherLocation({ variables: { lon: lon, lat: lat } })\r\n\r\n\r\n            const ResponseData = getWeatherLocationResponse.data.getCityByLocation\r\n            return ResponseData\r\n        } catch (e) {\r\n            return\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        setCurrentCityText(localStorage.getItem('Lastcity'))\r\n        InitializeData()\r\n    }, [])\r\n\r\n    return (\r\n        <ApiContext.Provider value={{\r\n            CurrentCityText,\r\n            SubmitRequest,\r\n            handleCityText,\r\n            dataFromDb,\r\n            isLoading,\r\n            arrayData,\r\n            hourlyData,\r\n            timezone\r\n        }}>\r\n            {children}\r\n        </ApiContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ApiContext","D:\\Desktop\\weather-ulap\\client\\src\\Components\\HourlyContainer\\HourlyContainer.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\AirQuality\\AirQuality.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\UvIndex\\UvIndex.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\Humidity\\Humidity.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\Rain\\Rain.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\Temperature\\Temperature.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\Sunrise\\Sunrise.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\utils\\query.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\Hour\\Hour.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\WeekElement\\WeekElement.js",["80"],"import React from 'react'\r\nimport './WeekElement.css'\r\nimport cloud from '../../utils/cloud.svg'\r\nimport Moment from 'react-moment';\r\nfunction WeekElement({ hitemp, lowtemp, pop, dt, today, icon }) {\r\n  const weather = ` http://openweathermap.org/img/wn/${icon}@4x.png`\r\n  const currentDate = new Date(dt * 1000)\r\n  return (\r\n    <>\r\n      <div className=\"DayCard\">\r\n        <div className='CurrentDay asc p16'>\r\n          {today ? <div>{today}</div> : <Moment format=\"ddd\">{currentDate}</Moment>}\r\n          {/* <Moment format=\"ddd\">{currentDate}</Moment> */}\r\n\r\n        </div>\r\n        <div className='CurrentDate asc p16'>\r\n          <Moment format=\"MM/DD\">{currentDate}</Moment></div>\r\n        <div className='CurrentHighTemp asc p16'>{Math.floor(hitemp)}°</div>\r\n        <div className='CurrentLowTemp asc p16'>{Math.floor(lowtemp)}°</div>\r\n        {(pop <= 0) ?\r\n          <></> : <>\r\n            <div className='CurrentIcon'>\r\n              <img className='s16 CurrentIconCloud' src={weather} alt=\"cloudsvg\"></img>\r\n            </div>\r\n            <div className='currentIconRain p8'>\r\n\r\n\r\n              {Math.floor(pop)}%\r\n            </div></>}\r\n\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WeekElement","D:\\Desktop\\weather-ulap\\client\\src\\Components\\WeekContainer\\WeekContainer.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\WeatherWidget\\WeatherWidget.js",[],"D:\\Desktop\\weather-ulap\\client\\src\\Components\\Search\\Search.js",[],{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","severity":1,"message":"86","line":160,"column":8,"nodeType":"87","endLine":160,"endColumn":10,"suggestions":"88"},{"ruleId":"89","severity":1,"message":"90","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":13},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'InitializeData'. Either include it or remove the dependency array.","ArrayExpression",["95"],"no-unused-vars","'cloud' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"96","fix":"97"},"Update the dependencies array to be: [InitializeData]",{"range":"98","text":"99"},[5747,5749],"[InitializeData]"]