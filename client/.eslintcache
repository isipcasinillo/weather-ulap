[{"/Users/cisip/Desktop/weather-ulap/client/src/index.js":"1","/Users/cisip/Desktop/weather-ulap/client/src/reportWebVitals.js":"2","/Users/cisip/Desktop/weather-ulap/client/src/App.js":"3","/Users/cisip/Desktop/weather-ulap/client/src/Components/HourlyContainer/HourlyContainer.js":"4","/Users/cisip/Desktop/weather-ulap/client/src/Components/WeekContainer.js":"5","/Users/cisip/Desktop/weather-ulap/client/src/Components/Snapshot/Snapshot.js":"6","/Users/cisip/Desktop/weather-ulap/client/src/Components/WeatherWidget.js":"7","/Users/cisip/Desktop/weather-ulap/client/src/Components/WeekElement.js":"8","/Users/cisip/Desktop/weather-ulap/client/src/Components/Hour/Hour.js":"9","/Users/cisip/Desktop/weather-ulap/client/src/Components/Humidity/Humidity.js":"10","/Users/cisip/Desktop/weather-ulap/client/src/Components/AirQuality/AirQuality.js":"11","/Users/cisip/Desktop/weather-ulap/client/src/Components/Temperature/Temperature.js":"12","/Users/cisip/Desktop/weather-ulap/client/src/Components/Sunrise/Sunrise.js":"13","/Users/cisip/Desktop/weather-ulap/client/src/Components/Rain/Rain.js":"14","/Users/cisip/Desktop/weather-ulap/client/src/utils/Expiry.js":"15","/Users/cisip/Desktop/weather-ulap/client/src/Components/UvIndex/UvIndex.js":"16","/Users/cisip/Desktop/weather-ulap/client/src/utils/query.js":"17","/Users/cisip/Desktop/weather-ulap/client/src/Components/ApiContext.js":"18","/Users/cisip/Desktop/weather-ulap/client/src/Components/Search.js":"19"},{"size":501,"mtime":1654161190921,"results":"20","hashOfConfig":"21"},{"size":362,"mtime":1654156850043,"results":"22","hashOfConfig":"21"},{"size":1345,"mtime":1654802701685,"results":"23","hashOfConfig":"21"},{"size":885,"mtime":1654843907225,"results":"24","hashOfConfig":"21"},{"size":830,"mtime":1654840052200,"results":"25","hashOfConfig":"21"},{"size":634,"mtime":1654156850040,"results":"26","hashOfConfig":"21"},{"size":1831,"mtime":1654841540982,"results":"27","hashOfConfig":"21"},{"size":1108,"mtime":1654845287429,"results":"28","hashOfConfig":"21"},{"size":892,"mtime":1654843630384,"results":"29","hashOfConfig":"21"},{"size":438,"mtime":1654156850039,"results":"30","hashOfConfig":"21"},{"size":623,"mtime":1654156850038,"results":"31","hashOfConfig":"21"},{"size":921,"mtime":1654156850041,"results":"32","hashOfConfig":"21"},{"size":591,"mtime":1654156850040,"results":"33","hashOfConfig":"21"},{"size":466,"mtime":1654156850040,"results":"34","hashOfConfig":"21"},{"size":306,"mtime":1654156850043,"results":"35","hashOfConfig":"21"},{"size":549,"mtime":1654156850041,"results":"36","hashOfConfig":"21"},{"size":583,"mtime":1654844709308,"results":"37","hashOfConfig":"21"},{"size":5799,"mtime":1654826123369,"results":"38","hashOfConfig":"21"},{"size":550,"mtime":1654785591180,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"5zypnn",{"filePath":"43","messages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"45","messages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"/Users/cisip/Desktop/weather-ulap/client/src/index.js",[],["81","82"],"/Users/cisip/Desktop/weather-ulap/client/src/reportWebVitals.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/App.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/HourlyContainer/HourlyContainer.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/WeekContainer.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Snapshot/Snapshot.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/WeatherWidget.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/WeekElement.js",["83"],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Hour/Hour.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Humidity/Humidity.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/AirQuality/AirQuality.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Temperature/Temperature.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Sunrise/Sunrise.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/Rain/Rain.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/utils/Expiry.js",[],["84","85"],"/Users/cisip/Desktop/weather-ulap/client/src/Components/UvIndex/UvIndex.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/utils/query.js",[],"/Users/cisip/Desktop/weather-ulap/client/src/Components/ApiContext.js",["86"],"\nimport { useLazyQuery } from '@apollo/client';\nimport React, { createContext, useEffect, useState } from 'react'\nimport Localbase from 'localbase'\nimport {\n    QUERY_CITY_NAME,\n    QUERY_CITY_LOCATION\n} from '../utils/query'\nconst ApiContext = createContext({})\n\nexport const ApiProvider = ({ children }) => {\n    const [CurrentCityText, setCurrentCityText] = useState(localStorage.getItem('Lastcity') == null ? 'dallas' : localStorage.getItem('Lastcity'))\n    const [getWeather] = useLazyQuery(QUERY_CITY_NAME);\n    const [getWeatherLocation] = useLazyQuery(QUERY_CITY_LOCATION);\n    const [dataFromDb, setDataFromDb] = useState({})\n    const [arrayData, setArrayData] = useState([])\n    const [hourlyData, setHourlyData] = useState([])\n    const [isLoading, setLoading] = useState(true)\n    let db = new Localbase('weatherDb')\n\n    const handleCityText = (event) => {\n        const { value } = event.target\n        setCurrentCityText(value.toLowerCase())\n    }\n\n    // takes the current time when called then adds 12 hours (milliseconds format)\n    const getExpireTimer = () => {\n        const now = new Date().getTime()\n        // 12 hours to milliseconds\n        const expireToken = 43200000\n        const newExpireToken = now + expireToken\n        return newExpireToken\n    }\n    // when called will take the API JSON, and API query cityname and insert to Database\n    const addDataToDb = async (data, cityName) => {\n        try {\n            await db.collection('weatherDb').add({\n                metadata: data,\n                city: cityName,\n                expire: getExpireTimer()\n            })\n        } catch (e) {\n            console.log(e)\n        }\n\n    }\n\n    // function called to delete document in the indexdb\n    const deleteDataDb = async () => {\n        try {\n            await db.collection('weatherDb').doc({ city: CurrentCityText }).delete()\n        } catch (e) {\n            console.log(e)\n        }\n\n    }\n\n    const getDataDb = async () => {\n        try {\n            const data = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\n            await setDataFromDb(data)\n\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const checkIfExpired = async () => {\n        const now = new Date().getTime()\n        try {\n            const datafromDbisExpired = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\n            if (!datafromDbisExpired) return true\n            if (await datafromDbisExpired.expire < now) {\n                console.log(`checkDatabase() has found that the entry is expired and now will perform a delete, fetch, add to refresh data`)\n                await deleteDataDb()\n                const responseCheck = await FetchCityByName()\n                if (!responseCheck) {\n                    return false\n                }\n                console.log(responseCheck)\n                await addDataToDb(responseCheck, CurrentCityText)\n\n            }\n            return true\n\n        } catch (e) {\n            console.log(e)\n        }\n    }\n\n    const checkDatabase = async () => {\n        const isDocumentinDb = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\n        console.log(CurrentCityText)\n        try {\n            // if document does not exist in database\n            if (isDocumentinDb == null) {\n                const fetchFromApi = await FetchCityByName()\n                if (!fetchFromApi) {\n                    return false\n                }\n\n                await addDataToDb(fetchFromApi, CurrentCityText)\n            }\n            return true\n        } catch (e) {\n            console.log(e)\n        }\n\n    }\n    const InitializeData = async () => {\n        // if (CurrentCityText === '') return\n        const x = await checkDatabase()\n        const y = await checkIfExpired() // true\n        console.log(x, y)\n        if (x && y) {\n            await getDataDb()\n            await setLoading(false)\n            const response = await db.collection('weatherDb').doc({ city: CurrentCityText }).get()\n            const dailyarray = response.metadata.daily\n            const hourlyarray = response.metadata.hourly\n            await setArrayData(dailyarray)\n            await setHourlyData(hourlyarray)\n            localStorage.setItem('Lastcity', CurrentCityText)\n        }\n    }\n    const SubmitRequest = async (e) => {\n\n        e.preventDefault()\n        await InitializeData()\n\n\n    }\n    // fetches using the variable then calls on function below to call with lon and lat\n    const FetchCityByName = async () => {\n        try {\n            const y = CurrentCityText\n            const getWeatherApiResponse = await getWeather({ variables: { cityname: y } })\n            const err = getWeatherApiResponse.data.getCityByName.coord\n            if (err === null) {\n                setCurrentCityText(localStorage.getItem('Lastcity'))\n                return\n            }\n            localStorage.setItem('Lastcity', y)\n            const { lon, lat } = getWeatherApiResponse.data.getCityByName.coord\n            const getWeatherLocationResponse = await getWeatherLocation({ variables: { lon: lon, lat: lat } })\n\n\n            const ResponseData = getWeatherLocationResponse.data.getCityByLocation\n            return ResponseData\n        } catch (e) {\n            return\n        }\n    }\n    useEffect(() => {\n\n        console.log('inti')\n        setCurrentCityText(localStorage.getItem('Lastcity'))\n        InitializeData()\n    }, [])\n\n    return (\n        <ApiContext.Provider value={{\n            CurrentCityText,\n            SubmitRequest,\n            handleCityText,\n            dataFromDb,\n            isLoading,\n            arrayData,\n            hourlyData\n        }}>\n            {children}\n        </ApiContext.Provider>\n    )\n}\n\nexport default ApiContext","/Users/cisip/Desktop/weather-ulap/client/src/Components/Search.js",[],{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":3,"column":8,"nodeType":"93","messageId":"94","endLine":3,"endColumn":13},{"ruleId":"87","replacedBy":"95"},{"ruleId":"89","replacedBy":"96"},{"ruleId":"97","severity":1,"message":"98","line":159,"column":8,"nodeType":"99","endLine":159,"endColumn":10,"suggestions":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'cloud' is defined but never used.","Identifier","unusedVar",["101"],["102"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'InitializeData'. Either include it or remove the dependency array.","ArrayExpression",["103"],"no-global-assign","no-unsafe-negation",{"desc":"104","fix":"105"},"Update the dependencies array to be: [InitializeData]",{"range":"106","text":"107"},[5466,5468],"[InitializeData]"]